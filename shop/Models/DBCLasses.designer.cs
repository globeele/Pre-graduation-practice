#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace shop.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="baza")]
	public partial class DBCLassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBrands(Brands instance);
    partial void UpdateBrands(Brands instance);
    partial void DeleteBrands(Brands instance);
    partial void InsertWays(Ways instance);
    partial void UpdateWays(Ways instance);
    partial void DeleteWays(Ways instance);
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertCountries(Countries instance);
    partial void UpdateCountries(Countries instance);
    partial void DeleteCountries(Countries instance);
    partial void InsertLaws(Laws instance);
    partial void UpdateLaws(Laws instance);
    partial void DeleteLaws(Laws instance);
    partial void InsertMethods(Methods instance);
    partial void UpdateMethods(Methods instance);
    partial void DeleteMethods(Methods instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    partial void InsertRecords(Records instance);
    partial void UpdateRecords(Records instance);
    partial void DeleteRecords(Records instance);
    partial void InsertStates(States instance);
    partial void UpdateStates(States instance);
    partial void DeleteStates(States instance);
    partial void InsertTechnics(Technics instance);
    partial void UpdateTechnics(Technics instance);
    partial void DeleteTechnics(Technics instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public DBCLassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bazaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBCLassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCLassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCLassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCLassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Brands> Brands
		{
			get
			{
				return this.GetTable<Brands>();
			}
		}
		
		public System.Data.Linq.Table<Ways> Ways
		{
			get
			{
				return this.GetTable<Ways>();
			}
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<Countries> Countries
		{
			get
			{
				return this.GetTable<Countries>();
			}
		}
		
		public System.Data.Linq.Table<Laws> Laws
		{
			get
			{
				return this.GetTable<Laws>();
			}
		}
		
		public System.Data.Linq.Table<Methods> Methods
		{
			get
			{
				return this.GetTable<Methods>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
		
		public System.Data.Linq.Table<Records> Records
		{
			get
			{
				return this.GetTable<Records>();
			}
		}
		
		public System.Data.Linq.Table<States> States
		{
			get
			{
				return this.GetTable<States>();
			}
		}
		
		public System.Data.Linq.Table<Technics> Technics
		{
			get
			{
				return this.GetTable<Technics>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brands")]
	public partial class Brands : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand_name;
		
		private int _Mark_del;
		
		private EntitySet<Technics> _Technics;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrand_nameChanging(string value);
    partial void OnBrand_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Brands()
		{
			this._Technics = new EntitySet<Technics>(new Action<Technics>(this.attach_Technics), new Action<Technics>(this.detach_Technics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand_name", DbType="NChar(18) NOT NULL", CanBeNull=false)]
		public string Brand_name
		{
			get
			{
				return this._Brand_name;
			}
			set
			{
				if ((this._Brand_name != value))
				{
					this.OnBrand_nameChanging(value);
					this.SendPropertyChanging();
					this._Brand_name = value;
					this.SendPropertyChanged("Brand_name");
					this.OnBrand_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brands_Technics", Storage="_Technics", ThisKey="Id", OtherKey="Technic_Brand_Id")]
		public EntitySet<Technics> Technics
		{
			get
			{
				return this._Technics;
			}
			set
			{
				this._Technics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Brands = this;
		}
		
		private void detach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Brands = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ways")]
	public partial class Ways : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Ways_name;
		
		private int _Mark_del;
		
		private EntitySet<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWays_nameChanging(string value);
    partial void OnWays_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Ways()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ways_name", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Ways_name
		{
			get
			{
				return this._Ways_name;
			}
			set
			{
				if ((this._Ways_name != value))
				{
					this.OnWays_nameChanging(value);
					this.SendPropertyChanging();
					this._Ways_name = value;
					this.SendPropertyChanged("Ways_name");
					this.OnWays_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_Orders", Storage="_Orders", ThisKey="Id", OtherKey="Order_Way_Id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Ways = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Ways = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category_name;
		
		private int _Mark_del;
		
		private EntitySet<Technics> _Technics;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategory_nameChanging(string value);
    partial void OnCategory_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Categories()
		{
			this._Technics = new EntitySet<Technics>(new Action<Technics>(this.attach_Technics), new Action<Technics>(this.detach_Technics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string Category_name
		{
			get
			{
				return this._Category_name;
			}
			set
			{
				if ((this._Category_name != value))
				{
					this.OnCategory_nameChanging(value);
					this.SendPropertyChanging();
					this._Category_name = value;
					this.SendPropertyChanged("Category_name");
					this.OnCategory_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Technics", Storage="_Technics", ThisKey="Id", OtherKey="Technic_Category_Id")]
		public EntitySet<Technics> Technics
		{
			get
			{
				return this._Technics;
			}
			set
			{
				this._Technics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Countries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Country_name;
		
		private int _Mark_del;
		
		private EntitySet<Technics> _Technics;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountry_nameChanging(string value);
    partial void OnCountry_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Countries()
		{
			this._Technics = new EntitySet<Technics>(new Action<Technics>(this.attach_Technics), new Action<Technics>(this.detach_Technics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country_name", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string Country_name
		{
			get
			{
				return this._Country_name;
			}
			set
			{
				if ((this._Country_name != value))
				{
					this.OnCountry_nameChanging(value);
					this.SendPropertyChanging();
					this._Country_name = value;
					this.SendPropertyChanged("Country_name");
					this.OnCountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countries_Technics", Storage="_Technics", ThisKey="Id", OtherKey="Technic_Country_Id")]
		public EntitySet<Technics> Technics
		{
			get
			{
				return this._Technics;
			}
			set
			{
				this._Technics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Countries = this;
		}
		
		private void detach_Technics(Technics entity)
		{
			this.SendPropertyChanging();
			entity.Countries = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laws")]
	public partial class Laws : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Law_name;
		
		private int _Mark_del;
		
		private EntitySet<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLaw_nameChanging(string value);
    partial void OnLaw_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Laws()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Law_name", DbType="NChar(38) NOT NULL", CanBeNull=false)]
		public string Law_name
		{
			get
			{
				return this._Law_name;
			}
			set
			{
				if ((this._Law_name != value))
				{
					this.OnLaw_nameChanging(value);
					this.SendPropertyChanging();
					this._Law_name = value;
					this.SendPropertyChanged("Law_name");
					this.OnLaw_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laws_Users", Storage="_Users", ThisKey="Id", OtherKey="User_Law_Id")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Laws = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Laws = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Methods")]
	public partial class Methods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Method_name;
		
		private int _Mark_del;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMethod_nameChanging(string value);
    partial void OnMethod_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Methods()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method_name", DbType="NChar(18) NOT NULL", CanBeNull=false)]
		public string Method_name
		{
			get
			{
				return this._Method_name;
			}
			set
			{
				if ((this._Method_name != value))
				{
					this.OnMethod_nameChanging(value);
					this.SendPropertyChanging();
					this._Method_name = value;
					this.SendPropertyChanged("Method_name");
					this.OnMethod_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Order_User_Id;
		
		private int _Order_Way_Id;
		
		private int _Order_State_Id;
		
		private System.DateTime _Order_date;
		
		private System.Nullable<System.DateTime> _Order_delivery;
		
		private int _Order_paid;
		
		private int _Mark_del;
		
		private System.Nullable<int> _Order_cat;
		
		private EntitySet<Records> _Records;
		
		private EntityRef<Ways> _Ways;
		
		private EntityRef<States> _States;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrder_User_IdChanging(int value);
    partial void OnOrder_User_IdChanged();
    partial void OnOrder_Way_IdChanging(int value);
    partial void OnOrder_Way_IdChanged();
    partial void OnOrder_State_IdChanging(int value);
    partial void OnOrder_State_IdChanged();
    partial void OnOrder_dateChanging(System.DateTime value);
    partial void OnOrder_dateChanged();
    partial void OnOrder_deliveryChanging(System.Nullable<System.DateTime> value);
    partial void OnOrder_deliveryChanged();
    partial void OnOrder_paidChanging(int value);
    partial void OnOrder_paidChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    partial void OnOrder_catChanging(System.Nullable<int> value);
    partial void OnOrder_catChanged();
    #endregion
		
		public Orders()
		{
			this._Records = new EntitySet<Records>(new Action<Records>(this.attach_Records), new Action<Records>(this.detach_Records));
			this._Ways = default(EntityRef<Ways>);
			this._States = default(EntityRef<States>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_User_Id", DbType="Int NOT NULL")]
		public int Order_User_Id
		{
			get
			{
				return this._Order_User_Id;
			}
			set
			{
				if ((this._Order_User_Id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_User_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_User_Id = value;
					this.SendPropertyChanged("Order_User_Id");
					this.OnOrder_User_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Way_Id", DbType="Int NOT NULL")]
		public int Order_Way_Id
		{
			get
			{
				return this._Order_Way_Id;
			}
			set
			{
				if ((this._Order_Way_Id != value))
				{
					if (this._Ways.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_Way_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Way_Id = value;
					this.SendPropertyChanged("Order_Way_Id");
					this.OnOrder_Way_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_State_Id", DbType="Int NOT NULL")]
		public int Order_State_Id
		{
			get
			{
				return this._Order_State_Id;
			}
			set
			{
				if ((this._Order_State_Id != value))
				{
					if (this._States.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_State_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_State_Id = value;
					this.SendPropertyChanged("Order_State_Id");
					this.OnOrder_State_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_date", DbType="DateTime NOT NULL")]
		public System.DateTime Order_date
		{
			get
			{
				return this._Order_date;
			}
			set
			{
				if ((this._Order_date != value))
				{
					this.OnOrder_dateChanging(value);
					this.SendPropertyChanging();
					this._Order_date = value;
					this.SendPropertyChanged("Order_date");
					this.OnOrder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_delivery", DbType="DateTime")]
		public System.Nullable<System.DateTime> Order_delivery
		{
			get
			{
				return this._Order_delivery;
			}
			set
			{
				if ((this._Order_delivery != value))
				{
					this.OnOrder_deliveryChanging(value);
					this.SendPropertyChanging();
					this._Order_delivery = value;
					this.SendPropertyChanged("Order_delivery");
					this.OnOrder_deliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_paid", DbType="Int NOT NULL")]
		public int Order_paid
		{
			get
			{
				return this._Order_paid;
			}
			set
			{
				if ((this._Order_paid != value))
				{
					this.OnOrder_paidChanging(value);
					this.SendPropertyChanging();
					this._Order_paid = value;
					this.SendPropertyChanged("Order_paid");
					this.OnOrder_paidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_cat", DbType="Int")]
		public System.Nullable<int> Order_cat
		{
			get
			{
				return this._Order_cat;
			}
			set
			{
				if ((this._Order_cat != value))
				{
					this.OnOrder_catChanging(value);
					this.SendPropertyChanging();
					this._Order_cat = value;
					this.SendPropertyChanged("Order_cat");
					this.OnOrder_catChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Records", Storage="_Records", ThisKey="Id", OtherKey="Record_Order_Id")]
		public EntitySet<Records> Records
		{
			get
			{
				return this._Records;
			}
			set
			{
				this._Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_Orders", Storage="_Ways", ThisKey="Order_Way_Id", OtherKey="Id", IsForeignKey=true)]
		public Ways Ways
		{
			get
			{
				return this._Ways.Entity;
			}
			set
			{
				Ways previousValue = this._Ways.Entity;
				if (((previousValue != value) 
							|| (this._Ways.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ways.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Ways.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Order_Way_Id = value.Id;
					}
					else
					{
						this._Order_Way_Id = default(int);
					}
					this.SendPropertyChanged("Ways");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Orders", Storage="_States", ThisKey="Order_State_Id", OtherKey="Id", IsForeignKey=true)]
		public States States
		{
			get
			{
				return this._States.Entity;
			}
			set
			{
				States previousValue = this._States.Entity;
				if (((previousValue != value) 
							|| (this._States.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._States.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._States.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Order_State_Id = value.Id;
					}
					else
					{
						this._Order_State_Id = default(int);
					}
					this.SendPropertyChanged("States");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Users", ThisKey="Order_User_Id", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Order_User_Id = value.Id;
					}
					else
					{
						this._Order_User_Id = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Records(Records entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_Records(Records entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Records")]
	public partial class Records : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Record_Order_Id;
		
		private int _Record_count;
		
		private int _Mark_del;
		
		private string _Domen;
		
		private string _Hoster;
		
		private string _Caption;
		
		private EntityRef<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRecord_Order_IdChanging(int value);
    partial void OnRecord_Order_IdChanged();
    partial void OnRecord_countChanging(int value);
    partial void OnRecord_countChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    partial void OnDomenChanging(string value);
    partial void OnDomenChanged();
    partial void OnHosterChanging(string value);
    partial void OnHosterChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    #endregion
		
		public Records()
		{
			this._Orders = default(EntityRef<Orders>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Record_Order_Id", DbType="Int NOT NULL")]
		public int Record_Order_Id
		{
			get
			{
				return this._Record_Order_Id;
			}
			set
			{
				if ((this._Record_Order_Id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecord_Order_IdChanging(value);
					this.SendPropertyChanging();
					this._Record_Order_Id = value;
					this.SendPropertyChanged("Record_Order_Id");
					this.OnRecord_Order_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Record_count", DbType="Int NOT NULL")]
		public int Record_count
		{
			get
			{
				return this._Record_count;
			}
			set
			{
				if ((this._Record_count != value))
				{
					this.OnRecord_countChanging(value);
					this.SendPropertyChanging();
					this._Record_count = value;
					this.SendPropertyChanged("Record_count");
					this.OnRecord_countChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domen", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Domen
		{
			get
			{
				return this._Domen;
			}
			set
			{
				if ((this._Domen != value))
				{
					this.OnDomenChanging(value);
					this.SendPropertyChanging();
					this._Domen = value;
					this.SendPropertyChanged("Domen");
					this.OnDomenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hoster", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Hoster
		{
			get
			{
				return this._Hoster;
			}
			set
			{
				if ((this._Hoster != value))
				{
					this.OnHosterChanging(value);
					this.SendPropertyChanging();
					this._Hoster = value;
					this.SendPropertyChanged("Hoster");
					this.OnHosterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NChar(200) NOT NULL", CanBeNull=false)]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Records", Storage="_Orders", ThisKey="Record_Order_Id", OtherKey="Id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Records.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Records.Add(this);
						this._Record_Order_Id = value.Id;
					}
					else
					{
						this._Record_Order_Id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class States : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _State_name;
		
		private int _Mark_del;
		
		private EntitySet<Orders> _Orders;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnState_nameChanging(string value);
    partial void OnState_nameChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public States()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State_name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string State_name
		{
			get
			{
				return this._State_name;
			}
			set
			{
				if ((this._State_name != value))
				{
					this.OnState_nameChanging(value);
					this.SendPropertyChanging();
					this._State_name = value;
					this.SendPropertyChanged("State_name");
					this.OnState_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="States_Orders", Storage="_Orders", ThisKey="Id", OtherKey="Order_State_Id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.States = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.States = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Technics")]
	public partial class Technics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Technic_Country_Id;
		
		private int _Technic_Category_Id;
		
		private int _Technic_Brand_Id;
		
		private string _Technic_name;
		
		private string _Technic_model;
		
		private string _Technic_param;
		
		private int _Technic_year;
		
		private double _Technic_cost;
		
		private int _Technic_availability;
		
		private int _Mark_del;
		
		private EntityRef<Brands> _Brands;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Countries> _Countries;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTechnic_Country_IdChanging(int value);
    partial void OnTechnic_Country_IdChanged();
    partial void OnTechnic_Category_IdChanging(int value);
    partial void OnTechnic_Category_IdChanged();
    partial void OnTechnic_Brand_IdChanging(int value);
    partial void OnTechnic_Brand_IdChanged();
    partial void OnTechnic_nameChanging(string value);
    partial void OnTechnic_nameChanged();
    partial void OnTechnic_modelChanging(string value);
    partial void OnTechnic_modelChanged();
    partial void OnTechnic_paramChanging(string value);
    partial void OnTechnic_paramChanged();
    partial void OnTechnic_yearChanging(int value);
    partial void OnTechnic_yearChanged();
    partial void OnTechnic_costChanging(double value);
    partial void OnTechnic_costChanged();
    partial void OnTechnic_availabilityChanging(int value);
    partial void OnTechnic_availabilityChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Technics()
		{
			this._Brands = default(EntityRef<Brands>);
			this._Categories = default(EntityRef<Categories>);
			this._Countries = default(EntityRef<Countries>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_Country_Id", DbType="Int NOT NULL")]
		public int Technic_Country_Id
		{
			get
			{
				return this._Technic_Country_Id;
			}
			set
			{
				if ((this._Technic_Country_Id != value))
				{
					if (this._Countries.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnic_Country_IdChanging(value);
					this.SendPropertyChanging();
					this._Technic_Country_Id = value;
					this.SendPropertyChanged("Technic_Country_Id");
					this.OnTechnic_Country_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_Category_Id", DbType="Int NOT NULL")]
		public int Technic_Category_Id
		{
			get
			{
				return this._Technic_Category_Id;
			}
			set
			{
				if ((this._Technic_Category_Id != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnic_Category_IdChanging(value);
					this.SendPropertyChanging();
					this._Technic_Category_Id = value;
					this.SendPropertyChanged("Technic_Category_Id");
					this.OnTechnic_Category_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_Brand_Id", DbType="Int NOT NULL")]
		public int Technic_Brand_Id
		{
			get
			{
				return this._Technic_Brand_Id;
			}
			set
			{
				if ((this._Technic_Brand_Id != value))
				{
					if (this._Brands.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnic_Brand_IdChanging(value);
					this.SendPropertyChanging();
					this._Technic_Brand_Id = value;
					this.SendPropertyChanged("Technic_Brand_Id");
					this.OnTechnic_Brand_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Technic_name
		{
			get
			{
				return this._Technic_name;
			}
			set
			{
				if ((this._Technic_name != value))
				{
					this.OnTechnic_nameChanging(value);
					this.SendPropertyChanging();
					this._Technic_name = value;
					this.SendPropertyChanged("Technic_name");
					this.OnTechnic_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_model", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Technic_model
		{
			get
			{
				return this._Technic_model;
			}
			set
			{
				if ((this._Technic_model != value))
				{
					this.OnTechnic_modelChanging(value);
					this.SendPropertyChanging();
					this._Technic_model = value;
					this.SendPropertyChanged("Technic_model");
					this.OnTechnic_modelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_param", DbType="NChar(50)")]
		public string Technic_param
		{
			get
			{
				return this._Technic_param;
			}
			set
			{
				if ((this._Technic_param != value))
				{
					this.OnTechnic_paramChanging(value);
					this.SendPropertyChanging();
					this._Technic_param = value;
					this.SendPropertyChanged("Technic_param");
					this.OnTechnic_paramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_year", DbType="Int NOT NULL")]
		public int Technic_year
		{
			get
			{
				return this._Technic_year;
			}
			set
			{
				if ((this._Technic_year != value))
				{
					this.OnTechnic_yearChanging(value);
					this.SendPropertyChanging();
					this._Technic_year = value;
					this.SendPropertyChanged("Technic_year");
					this.OnTechnic_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_cost", DbType="Float NOT NULL")]
		public double Technic_cost
		{
			get
			{
				return this._Technic_cost;
			}
			set
			{
				if ((this._Technic_cost != value))
				{
					this.OnTechnic_costChanging(value);
					this.SendPropertyChanging();
					this._Technic_cost = value;
					this.SendPropertyChanged("Technic_cost");
					this.OnTechnic_costChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technic_availability", DbType="Int NOT NULL")]
		public int Technic_availability
		{
			get
			{
				return this._Technic_availability;
			}
			set
			{
				if ((this._Technic_availability != value))
				{
					this.OnTechnic_availabilityChanging(value);
					this.SendPropertyChanging();
					this._Technic_availability = value;
					this.SendPropertyChanged("Technic_availability");
					this.OnTechnic_availabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brands_Technics", Storage="_Brands", ThisKey="Technic_Brand_Id", OtherKey="Id", IsForeignKey=true)]
		public Brands Brands
		{
			get
			{
				return this._Brands.Entity;
			}
			set
			{
				Brands previousValue = this._Brands.Entity;
				if (((previousValue != value) 
							|| (this._Brands.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brands.Entity = null;
						previousValue.Technics.Remove(this);
					}
					this._Brands.Entity = value;
					if ((value != null))
					{
						value.Technics.Add(this);
						this._Technic_Brand_Id = value.Id;
					}
					else
					{
						this._Technic_Brand_Id = default(int);
					}
					this.SendPropertyChanged("Brands");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Technics", Storage="_Categories", ThisKey="Technic_Category_Id", OtherKey="Id", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Technics.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Technics.Add(this);
						this._Technic_Category_Id = value.Id;
					}
					else
					{
						this._Technic_Category_Id = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countries_Technics", Storage="_Countries", ThisKey="Technic_Country_Id", OtherKey="Id", IsForeignKey=true)]
		public Countries Countries
		{
			get
			{
				return this._Countries.Entity;
			}
			set
			{
				Countries previousValue = this._Countries.Entity;
				if (((previousValue != value) 
							|| (this._Countries.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Countries.Entity = null;
						previousValue.Technics.Remove(this);
					}
					this._Countries.Entity = value;
					if ((value != null))
					{
						value.Technics.Add(this);
						this._Technic_Country_Id = value.Id;
					}
					else
					{
						this._Technic_Country_Id = default(int);
					}
					this.SendPropertyChanged("Countries");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _User_Law_Id;
		
		private string _User_fio;
		
		private string _User_address;
		
		private string _User_pasport;
		
		private string _User_email;
		
		private string _User_tel;
		
		private string _User_log;
		
		private string _User_pas;
		
		private int _Mark_del;
		
		private EntitySet<Orders> _Orders;
		
		private EntityRef<Laws> _Laws;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUser_Law_IdChanging(int value);
    partial void OnUser_Law_IdChanged();
    partial void OnUser_fioChanging(string value);
    partial void OnUser_fioChanged();
    partial void OnUser_addressChanging(string value);
    partial void OnUser_addressChanged();
    partial void OnUser_pasportChanging(string value);
    partial void OnUser_pasportChanged();
    partial void OnUser_emailChanging(string value);
    partial void OnUser_emailChanged();
    partial void OnUser_telChanging(string value);
    partial void OnUser_telChanged();
    partial void OnUser_logChanging(string value);
    partial void OnUser_logChanged();
    partial void OnUser_pasChanging(string value);
    partial void OnUser_pasChanged();
    partial void OnMark_delChanging(int value);
    partial void OnMark_delChanged();
    #endregion
		
		public Users()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._Laws = default(EntityRef<Laws>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Law_Id", DbType="Int NOT NULL")]
		public int User_Law_Id
		{
			get
			{
				return this._User_Law_Id;
			}
			set
			{
				if ((this._User_Law_Id != value))
				{
					if (this._Laws.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_Law_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Law_Id = value;
					this.SendPropertyChanged("User_Law_Id");
					this.OnUser_Law_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_fio", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string User_fio
		{
			get
			{
				return this._User_fio;
			}
			set
			{
				if ((this._User_fio != value))
				{
					this.OnUser_fioChanging(value);
					this.SendPropertyChanging();
					this._User_fio = value;
					this.SendPropertyChanged("User_fio");
					this.OnUser_fioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_address", DbType="NChar(70) NOT NULL", CanBeNull=false)]
		public string User_address
		{
			get
			{
				return this._User_address;
			}
			set
			{
				if ((this._User_address != value))
				{
					this.OnUser_addressChanging(value);
					this.SendPropertyChanging();
					this._User_address = value;
					this.SendPropertyChanged("User_address");
					this.OnUser_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_pasport", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string User_pasport
		{
			get
			{
				return this._User_pasport;
			}
			set
			{
				if ((this._User_pasport != value))
				{
					this.OnUser_pasportChanging(value);
					this.SendPropertyChanging();
					this._User_pasport = value;
					this.SendPropertyChanged("User_pasport");
					this.OnUser_pasportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_email", DbType="NChar(30)")]
		public string User_email
		{
			get
			{
				return this._User_email;
			}
			set
			{
				if ((this._User_email != value))
				{
					this.OnUser_emailChanging(value);
					this.SendPropertyChanging();
					this._User_email = value;
					this.SendPropertyChanged("User_email");
					this.OnUser_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_tel", DbType="NChar(13) NOT NULL", CanBeNull=false)]
		public string User_tel
		{
			get
			{
				return this._User_tel;
			}
			set
			{
				if ((this._User_tel != value))
				{
					this.OnUser_telChanging(value);
					this.SendPropertyChanging();
					this._User_tel = value;
					this.SendPropertyChanged("User_tel");
					this.OnUser_telChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_log", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string User_log
		{
			get
			{
				return this._User_log;
			}
			set
			{
				if ((this._User_log != value))
				{
					this.OnUser_logChanging(value);
					this.SendPropertyChanging();
					this._User_log = value;
					this.SendPropertyChanged("User_log");
					this.OnUser_logChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_pas", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string User_pas
		{
			get
			{
				return this._User_pas;
			}
			set
			{
				if ((this._User_pas != value))
				{
					this.OnUser_pasChanging(value);
					this.SendPropertyChanging();
					this._User_pas = value;
					this.SendPropertyChanged("User_pas");
					this.OnUser_pasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark_del", DbType="Int NOT NULL")]
		public int Mark_del
		{
			get
			{
				return this._Mark_del;
			}
			set
			{
				if ((this._Mark_del != value))
				{
					this.OnMark_delChanging(value);
					this.SendPropertyChanging();
					this._Mark_del = value;
					this.SendPropertyChanged("Mark_del");
					this.OnMark_delChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Orders", ThisKey="Id", OtherKey="Order_User_Id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laws_Users", Storage="_Laws", ThisKey="User_Law_Id", OtherKey="Id", IsForeignKey=true)]
		public Laws Laws
		{
			get
			{
				return this._Laws.Entity;
			}
			set
			{
				Laws previousValue = this._Laws.Entity;
				if (((previousValue != value) 
							|| (this._Laws.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laws.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Laws.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._User_Law_Id = value.Id;
					}
					else
					{
						this._User_Law_Id = default(int);
					}
					this.SendPropertyChanged("Laws");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
